{% include 'header' %}
// swiftlint:disable unused_closure_parameter
// swiftlint:disable closure_parameter_position

import Swinject
import AloeStackView
import TransitionHandler

// MARK: - {{ prefix }}{{ module_info.name }}ModuleAssembly

final {{ privacy }}class {{ prefix }}{{ module_info.name }}ModuleAssembly: CollectableAssembly {

    // MARK: - Initializers

    required {{ privacy }}init() {
    }

    // MARK: - Useful

    {{ privacy }}func obtainViewController() -> {{ prefix }}{{ module_info.name }}ViewController {
        container.resolve({{ prefix }}{{ module_info.name }}ViewController.self).unwrap()
    }

    // MARK: - Assembly

    {{ privacy }}func assemble(inContainer container: Container) {

        container.register({{ prefix }}{{ module_info.name }}ViewController.self) { resolver in
            let controller = {{ prefix }}{{ module_info.name }}ViewController()
            let contentManager = resolver.resolve(
                {{ prefix }}{{ module_info.name }}ContentManager.self,
                argument: controller.stackView
            ).unwrap()
            controller.output = resolver.resolve(
                {{ prefix }}{{ module_info.name }}ViewOutput.self,
                arguments: controller as {{ prefix }}{{ module_info.name }}ViewInput, contentManager
            )
            return controller
        }

        container.register({{ prefix }}{{ module_info.name }}RouterInput.self) { (resolver, transitionHandler: TransitionHandler) in
            let router = {{ prefix }}{{ module_info.name }}Router(
                transitionHandler: transitionHandler
            )
            return router
        }

        container.register({{ prefix }}{{ module_info.name }}ViewOutput.self) { (
            resolver,
            view: {{ prefix }}{{ module_info.name }}ViewInput,
            contentManager: {{ prefix }}{{ module_info.name }}ContentManager
        ) in
            let viewModelDesigner = resolver.resolve({{ prefix }}{{ module_info.name }}ViewModelDesigner.self).unwrap()
            let transitionHandler = (view as? TransitionHandler).unwrap()
            let router = resolver.resolve(
                {{ prefix }}{{ module_info.name }}RouterInput.self,
                argument: transitionHandler
            ).unwrap()
            let interactor = resolver
                .resolve({{ prefix }}{{ module_info.name }}InteractorInput.self)
                .unwrap(as: {{ prefix }}{{ module_info.name }}Interactor.self)
            let presenter = {{ prefix }}{{ module_info.name }}Presenter(
                view: view,
                interactor: interactor,
                router: router,
                contentManager: contentManager,
                viewModelDesigner: viewModelDesigner
            )
            interactor.output = presenter
            return presenter
        }

        container.register({{ prefix }}{{ module_info.name }}InteractorInput.self) { resolver in
            let {{ service_uncap }}Service = resolver.resolve({{ prefix }}{{ custom_parameters.service }}Service.self).unwrap()
            let interactor = {{ prefix }}{{ module_info.name }}Interactor({{ service_uncap }}Service: {{ service_uncap }}Service)
            return interactor
        }

        container.register({{ prefix }}{{ module_info.name }}ViewModelDesigner.self) { resolver in
            return {{ prefix }}{{ module_info.name }}ViewModelDesignerImplementation()
        }

        container.register({{ prefix }}{{ module_info.name }}ContentManager.self) { (resolver, stackView: AloeStackView) in
            let contentManager = {{ prefix }}{{ module_info.name }}ContentManagerImplementation(stackView: stackView)
            return contentManager
        }
    }
}
