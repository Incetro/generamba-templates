{% include 'header' %}

import UIKit
import GenericCellPresenters

// MARK: - {{ custom_parameters.cell }}CellPresenter

final {{ privacy }}class {{ custom_parameters.cell }}CellPresenter: GenericCellPresenter<{{ custom_parameters.cell }}Cell> {

    // MARK: - Properties

    /// ViewModel instance
    private let viewModel: {{ custom_parameters.cell }}CellViewModelProtocol

    /// {{ module_info.name }}Router instance
    private unowned let {{ module_name_uncap }}Router: {{ module_info.name }}RouterInput

    // MARK: - Initializers

    /// Default initializer
    ///
    /// - Parameter viewModel: ViewModel instance
    {{ privacy }}init(viewModel: {{ custom_parameters.cell }}CellViewModelProtocol, {{ prefix }}{{ module_name_uncap }}Router: {{ prefix }}{{ module_info.name }}RouterInput) {
        self.viewModel = viewModel
        self.{{ module_name_uncap }}Router = {{ module_name_uncap }}Router
    }

    // MARK: - CellPresenter

    override {{ privacy }}func configureCell(_ cell: {{ custom_parameters.cell }}Cell) {
        cell.setup(with: viewModel)
    }

    override {{ privacy }}func cellSize(reusableCellHolder: UITableView) -> CGSize {
        CGSize(width: reusableCellHolder.frame.width, height: 52)
    }
}
