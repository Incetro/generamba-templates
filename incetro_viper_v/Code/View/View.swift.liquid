{% include 'header' %}

import UIKit
import Designable
import Localizable
import TransitionHandler

// MARK: - {{ prefix }}{{ module_info.name }}View

final {{ privacy }}class {{ prefix }}{{ module_info.name }}View: UIView {

    // MARK: - Properties

    /// Presenter instance
    var output: {{ prefix }}{{ module_info.name }}ViewOutput?

    // MARK: - Initializers

    /// Default initializer
    {{ privacy }}init() {
        super.init(frame: .zero)
        designer.add(designable: self, for: \.{{ prefix }}{{ module_name_uncap }}ViewAppearance)
        localizer.add(localizable: self)
        output?.didTriggerViewReadyEvent()
        setup()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

// MARK: - Setup

private extension {{ prefix }}{{ module_info.name }}View {

    func setup() {
    }
}

// MARK: - Actions

private extension {{ prefix }}{{ module_info.name }}View {
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewInput

extension {{ prefix }}{{ module_info.name }}View: {{ prefix }}{{ module_info.name }}ViewInput {

    {{ privacy }}func setupInitialState() {
    }
}

// MARK: - ViperViewOutputProvider

extension {{ prefix }}{{ module_info.name }}View: ViewOutputProvider {

    {{ privacy }}var viewOutput: ModuleInput? {
        output as? ModuleInput
    }
}

// MARK: - Localizable

extension {{ prefix }}{{ module_info.name }}View: Localizable {

    {{ privacy }}func localize() {
    }
}

// MARK: - Designable

extension {{ prefix }}{{ module_info.name }}View: Designable {

    {{ privacy }}func design(appearance: {{ prefix }}{{ module_info.name }}ViewAppearance) {
        backgroundColor = appearance.backgroundColor
    }
}

// MARK: - Constants

extension {{ prefix }}{{ module_info.name }}View {

    enum Constants {
    }
}
