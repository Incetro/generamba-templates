{% include 'header' %}
// swiftlint:disable unused_closure_parameter

import Swinject
import TransitionHandler

// MARK: - {{ prefix }}{{ module_info.name }}ModuleAssembly

final {{ privacy }}class {{ prefix }}{{ module_info.name }}ModuleAssembly: CollectableAssembly {

    // MARK: - Initializers

    required {{ privacy }}init() {
    }

    // MARK: - Useful

    {{ privacy }}func obtainViewController() -> {{ prefix }}{{ module_info.name }}ViewController {
        container.resolve({{ prefix }}{{ module_info.name }}ViewController.self).unwrap()
    }

    // MARK: - Assembly

    {{ privacy }}func assemble(inContainer container: Container) {

        container.register({{ prefix }}{{ module_info.name }}ViewController.self) { resolver in
            let controller = {{ prefix }}{{ module_info.name }}ViewController()
            controller.output = resolver.resolve({{ prefix }}{{ module_info.name }}ViewOutput.self, argument: controller as {{ prefix }}{{ module_info.name }}ViewInput)
            return controller
        }

        container.register({{ prefix }}{{ module_info.name }}RouterInput.self) { (resolver, transitionHandler: TransitionHandler) in
            let router = {{ prefix }}{{ module_info.name }}Router(transitionHandler: transitionHandler)
            return router
        }

        container.register({{ prefix }}{{ module_info.name }}ViewOutput.self) { (resolver, view: {{ prefix }}{{ module_info.name }}ViewInput) in
            let transitionHandler = (view as? TransitionHandler).unwrap()
            let router = resolver.resolve(
                {{ prefix }}{{ module_info.name }}RouterInput.self,
                argument: transitionHandler
            ).unwrap()
            let interactor = resolver
                .resolve({{ prefix }}{{ module_info.name }}InteractorInput.self)
                .unwrap(as: {{ prefix }}{{ module_info.name }}Interactor.self)
            let presenter = {{ prefix }}{{ module_info.name }}Presenter(
                view: view,
                interactor: interactor,
                router: router
            )
            interactor.output = presenter
            return presenter
        }

        container.register({{ prefix }}{{ module_info.name }}InteractorInput.self) { resolver in
            let interactor = {{ prefix }}{{ module_info.name }}Interactor()
            return interactor
        }
    }
}
